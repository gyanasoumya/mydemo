package MangoDB;

import java.io.IOException;
import java.io.InputStream;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.usermodel.Sheet;

import com.gdoc.gls.constant.Account;
import com.gdoc.gls.constant.AccountConstant;
import com.gdoc.gls.constant.CountryConstant;
import com.gdoc.gls.constant.CustomerConstant;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.MongoException;
import com.mongodb.util.JSON;

import java.io.FileInputStream;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

public class DataReadCol2 {

	@SuppressWarnings("rawtypes")
	public static void main(String[] args) throws Exception {

		String filename = "C:/Users/JAI JAGANNATHA/Desktop/countryitspound.xlsx";
		FileInputStream fis = null;

		try {
			String json = "{\"id\":" + CustomerConstant.id + ",\"lid\":"
					+ CustomerConstant.lid + ",\"association\":"
					+ CustomerConstant.association
					+ ",\"classificationNodes\":[";
			fis = new FileInputStream(filename);

			InputStream inp = new FileInputStream(
					"C:/Users/JAI JAGANNATHA/Desktop/countryitspound.xlsx");
			int ctr = 0;
			Workbook wb = WorkbookFactory.create(inp);
			Sheet sheet = wb.getSheetAt(0);

			Iterator rowIter = (sheet).iterator();
			int rownum = 1;

			Map<String, Set<Account>> accountMap = new HashMap<String, Set<Account>>();
			while (rowIter.hasNext()) {
				Row myRow = (Row) rowIter.next();
				Iterator cellIter = myRow.cellIterator();
				if (rownum > 1) {
					Vector<String> cellStoreVector = new Vector<String>();
					Set<Account> unicRow = new HashSet<Account>();
					Account ac = new Account();
					int columnIdex = 0;
					while (cellIter.hasNext()) {

						Cell myCell = (Cell) cellIter.next();
						System.out.print(myCell.toString());
						System.out.print(" ");
						String cellvalue = myCell.toString();
						if (columnIdex == 0) {
							ac.setCountry(cellvalue);
						} else if (columnIdex == 1) {
							ac.setType(cellvalue);
						}
						cellStoreVector.addElement(cellvalue);
						columnIdex++;
					}

					if (null != accountMap.get(ac.getType())) {
						unicRow = accountMap.get(ac.getType());
						unicRow.add(ac);
						accountMap.put(ac.getType(), unicRow);
					} else {
						accountMap.put(ac.getType(), unicRow);
					}
					String firstcolumnValue = null;
					String secondcolumnValue = null;

					int i = 0;
					firstcolumnValue = cellStoreVector.get(i).toString();
					secondcolumnValue = cellStoreVector.get(i + 1).toString();

					insertQuery(firstcolumnValue, secondcolumnValue);
				}
				rownum++;
			}

			Set<String> accountTypeSet = accountMap.keySet();
			for (String accountType : accountTypeSet) {
				json = json
						+ "{\"id\":"
						+ "\""
						+ CountryConstant.id
						+ accountType
						+ "\",\"lid\":\""
						+ CountryConstant.lid
						+ accountType
						+ "\",\"home\":\""
						+ CountryConstant.home
						+ accountType
						+ "\",\"name\":\""
						+ accountType
						+ "\",\"description\":\""
						+ accountType
						+ "\",\"objectType\":{},\"status\":\""
						+ CountryConstant.id
						+ "\",\"versionInfo\":\"1.0\",\"externalIdentifiers\":[],\"classification\":[],\"associations\":[";

				//
				Set<Account> accountSet = accountMap.get(accountType);
				for (Account ac : accountSet) {
					System.out.println(ac);
					System.out.println(ac.getType());
					System.out.println(ac.getCountry());
					json = json
							+ "{\"id\":null,\"associationType\":{\"id\":\""
							+ AccountConstant.associationTypeId
							+ "\",\"home\":\""
							+ AccountConstant.associationTypeHome
							+ "\"},\"sourceObject\":{\"id\":\""
							+ AccountConstant.sourceObjectId+ac.getType()
							+ "\",\"home\":\""
							+ AccountConstant.sourceObjectHome
							+ "\"},\"targetObject\":{\"id\":\""
							+ AccountConstant.targetObjectId+ac.getCountry()
							+ "\",\"home\":\""
							+ AccountConstant.targetObjectHome
							+ "\"},\"id\":\"urn:uuid:fe7232j3hjgj23g76\",\"lid\":\"urn:uuid:fe7232j3hjgj23g76\"},";

				}
				System.out.println();
				System.out.println(json);
			}
			System.out.println(json);
			json = removeLastChar(json, 1);
			json = json + "]}";
			System.out.println(json);
		} catch (IOException e) {

			e.printStackTrace();

		} finally {

			if (fis != null) {

				fis.close();

			}

		}

		// showExelData(sheetData);

	}

	private static void insertQuery(String firstcolumnvalue,
			String secondcolumnvalue) {

		System.out.println(firstcolumnvalue + " " + secondcolumnvalue);

	}

	private static String removeLastChar(String str, Integer numChar) {
		return str.substring(0, str.length() - numChar);
	}

	private static void insertMongoTable(String json, String dbName,
			String collectionName) {
		try {

			Mongo mongo = new Mongo("localhost", 27017);
			DB db = mongo.getDB(dbName);
			DBCollection collection = db.getCollection(collectionName);

			// convert JSON to DBObject directly
			DBObject dbObject = (DBObject) JSON.parse(json);

			collection.insert(dbObject);

			DBCursor cursorDoc = collection.find();
			while (cursorDoc.hasNext()) {
				System.out.println(cursorDoc.next());
			}

			System.out.println("Done");

		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (MongoException e) {
			e.printStackTrace();
		}
	}

}



package com.gdoc.gls.constant;

public class AccountConstant {
	public static String id = "urn:hsbc:cmv:gdocs:party:taxonomies:accountType:";// accountTypeCountryAssociations";
	public static String home = "/proudct/taxonomise/urn/hsbc:cmb:gdocs:product:taxonomies:accountType:/nodes/urn:hsbc:cmb:gdocs:";// /AssociationType";

	public static String associationTypeId = "urn:hsbc:cmv:gdocs:party:taxonomies:assoType:accountTypeCountryAssociation";
	public static String associationTypeHome = "/proudct/taxonomise/urn/hsbc:cmv:gdocs:party:taxonomies:";// /AssociationType";

	public static String sourceObjectId = "urn:hsbc:cmv:gdocs:party:taxonomies:assoType:accountType:";
	public static String sourceObjectHome = "/proudct/taxonomise/urn/hsbc:cmv:gdocs:party:taxonomies:assoType:accountType:";// /AssociationType";

	public static String targetObjectId = "urn:hsbc:cmv:gdocs:party:taxonomies:assoType:accountTypeCountryAssociation:";
	public static String targetObjectHome = "/proudct/taxonomise/urn/hsbc:cmv:gdocs:party:taxonomies:country:";// /AssociationType";

}










package com.gdoc.gls.constant;

public class Account {
	private String country;
	private String type;

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Override
	public String toString() {
		return "Account [country=" + country + ", type=" + type + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((country == null) ? 0 : country.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Account other = (Account) obj;
		if (country == null) {
			if (other.country != null)
				return false;
		} else if (!country.equals(other.country))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}

}


